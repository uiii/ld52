//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Other/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Harvester"",
            ""id"": ""fa9e9650-bd58-4a4b-bc83-0f16ef08cd83"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e84ad8d1-9560-42bb-addc-1dd6392e8e41"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""de370fc7-d974-46dc-a430-b9cdc3d4c2b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""PassThrough"",
                    ""id"": ""db3f2007-3039-4938-8933-c5b88e90a095"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteerLeft"",
                    ""type"": ""Button"",
                    ""id"": ""28fd4014-7398-483a-9600-f9c5172fe059"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteerRight"",
                    ""type"": ""Button"",
                    ""id"": ""1751471c-02fe-4fd9-b8a8-df05f876a9d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""527b736e-c642-424f-b22a-43d8130b3b36"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fcdd1c6-24d0-4aea-8205-30867e6fc252"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6407fe7-ea54-4b53-8d69-dbb8ad54d6fa"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9611ed18-372d-4a11-bae8-1ebed1ae1fb0"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fdfe13e-537e-40ca-93a6-4f9ab4543795"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8092c9da-eb4f-4dae-b232-2faaac97437b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9280796f-abd1-4a08-a298-929612d28cb6"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2392b388-7df1-4a76-b7da-b4a38c72a9b2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85b09a42-4ae7-4f89-808c-231d358ffd15"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""978286a6-7971-440b-8e53-49bcd53b6e06"",
            ""actions"": [
                {
                    ""name"": ""Start fire"",
                    ""type"": ""Button"",
                    ""id"": ""e5ae2a98-d61a-4d5a-954d-1453137df530"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""4b795699-77ff-4d06-a10a-0e872678d184"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""91e6a612-7cd3-4a2d-bc72-65a92bf52d6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0345914f-b3e5-456b-aa1d-86a3c2fb5db9"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa0b71f1-d1cd-4e9f-a3d6-5a6b1d1a612f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""401b8782-bdd8-4e1a-b405-017908cb22f5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62cc9f0b-e116-4659-b110-dba41b6c2d1e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""15713beb-e7c9-4c92-a9c4-8c0fbb90a9d8"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""e47c324b-9c88-467a-8b0c-160776bc6e20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""334eb0b0-c897-46ab-ba75-2503809155f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70fb897a-2423-4565-891f-b4fc7a22da94"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8b5efb9-8a46-4b15-8872-564d04a8177e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eee83dd8-5148-4a55-a3ec-842b7859a67d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Harvester
        m_Harvester = asset.FindActionMap("Harvester", throwIfNotFound: true);
        m_Harvester_Accelerate = m_Harvester.FindAction("Accelerate", throwIfNotFound: true);
        m_Harvester_Steer = m_Harvester.FindAction("Steer", throwIfNotFound: true);
        m_Harvester_Break = m_Harvester.FindAction("Break", throwIfNotFound: true);
        m_Harvester_SteerLeft = m_Harvester.FindAction("SteerLeft", throwIfNotFound: true);
        m_Harvester_SteerRight = m_Harvester.FindAction("SteerRight", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Startfire = m_Game.FindAction("Start fire", throwIfNotFound: true);
        m_Game_Restart = m_Game.FindAction("Restart", throwIfNotFound: true);
        m_Game_Pause = m_Game.FindAction("Pause", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Resume = m_Menu.FindAction("Resume", throwIfNotFound: true);
        m_Menu_Fire = m_Menu.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Harvester
    private readonly InputActionMap m_Harvester;
    private IHarvesterActions m_HarvesterActionsCallbackInterface;
    private readonly InputAction m_Harvester_Accelerate;
    private readonly InputAction m_Harvester_Steer;
    private readonly InputAction m_Harvester_Break;
    private readonly InputAction m_Harvester_SteerLeft;
    private readonly InputAction m_Harvester_SteerRight;
    public struct HarvesterActions
    {
        private @InputControls m_Wrapper;
        public HarvesterActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_Harvester_Accelerate;
        public InputAction @Steer => m_Wrapper.m_Harvester_Steer;
        public InputAction @Break => m_Wrapper.m_Harvester_Break;
        public InputAction @SteerLeft => m_Wrapper.m_Harvester_SteerLeft;
        public InputAction @SteerRight => m_Wrapper.m_Harvester_SteerRight;
        public InputActionMap Get() { return m_Wrapper.m_Harvester; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HarvesterActions set) { return set.Get(); }
        public void SetCallbacks(IHarvesterActions instance)
        {
            if (m_Wrapper.m_HarvesterActionsCallbackInterface != null)
            {
                @Accelerate.started -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnAccelerate;
                @Accelerate.performed -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnAccelerate;
                @Accelerate.canceled -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnAccelerate;
                @Steer.started -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteer;
                @Break.started -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnBreak;
                @SteerLeft.started -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteerLeft;
                @SteerLeft.performed -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteerLeft;
                @SteerLeft.canceled -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteerLeft;
                @SteerRight.started -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteerRight;
                @SteerRight.performed -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteerRight;
                @SteerRight.canceled -= m_Wrapper.m_HarvesterActionsCallbackInterface.OnSteerRight;
            }
            m_Wrapper.m_HarvesterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
                @SteerLeft.started += instance.OnSteerLeft;
                @SteerLeft.performed += instance.OnSteerLeft;
                @SteerLeft.canceled += instance.OnSteerLeft;
                @SteerRight.started += instance.OnSteerRight;
                @SteerRight.performed += instance.OnSteerRight;
                @SteerRight.canceled += instance.OnSteerRight;
            }
        }
    }
    public HarvesterActions @Harvester => new HarvesterActions(this);

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_Startfire;
    private readonly InputAction m_Game_Restart;
    private readonly InputAction m_Game_Pause;
    public struct GameActions
    {
        private @InputControls m_Wrapper;
        public GameActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Startfire => m_Wrapper.m_Game_Startfire;
        public InputAction @Restart => m_Wrapper.m_Game_Restart;
        public InputAction @Pause => m_Wrapper.m_Game_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @Startfire.started -= m_Wrapper.m_GameActionsCallbackInterface.OnStartfire;
                @Startfire.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnStartfire;
                @Startfire.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnStartfire;
                @Restart.started -= m_Wrapper.m_GameActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnRestart;
                @Pause.started -= m_Wrapper.m_GameActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Startfire.started += instance.OnStartfire;
                @Startfire.performed += instance.OnStartfire;
                @Startfire.canceled += instance.OnStartfire;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GameActions @Game => new GameActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Resume;
    private readonly InputAction m_Menu_Fire;
    public struct MenuActions
    {
        private @InputControls m_Wrapper;
        public MenuActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Resume => m_Wrapper.m_Menu_Resume;
        public InputAction @Fire => m_Wrapper.m_Menu_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Resume.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnResume;
                @Resume.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnResume;
                @Resume.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnResume;
                @Fire.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Resume.started += instance.OnResume;
                @Resume.performed += instance.OnResume;
                @Resume.canceled += instance.OnResume;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IHarvesterActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnSteerLeft(InputAction.CallbackContext context);
        void OnSteerRight(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnStartfire(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnResume(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
